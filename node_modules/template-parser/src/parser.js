const $ = (document, selector) => {
  return document.querySelector(selector)
}

const $$ = (document, selector) => {
  return document.querySelectorAll(selector)
}

const scrapedSelectorFields = (document, section) => async (scrapedObjectPromise, fieldKey) => {
  const scrapedObject = await scrapedObjectPromise
  const field = section.fields[fieldKey]
  const fieldSelectorString = await field.selector ? field.selector : field
  const isFieldPresent = await $(document, fieldSelectorString)
  if (!isFieldPresent) return scrapedObject
  if (field.has_child) {
    const childSelectors = $$(document, field.selector)
    scrapedObject[fieldKey] = await Promise.all(
      [...childSelectors].map((s) => scrapSelector(s, field))
    )
  } else if (field.is_multiple) {
    const childSelectors = $$(document, field.selector)
    scrapedObject[fieldKey] = [...childSelectors].map((s) => (field.attribute && s[field.attribute]) ? s[field.attribute].trim() : s.textContent ? s.textContent.trim() : '' )
  } else if (field.attribute) {
    if (field.attribute == "innerHTML") {
      scrapedObject[fieldKey] = $(document, fieldSelectorString).innerHTML ? $(document, fieldSelectorString).innerHTML.trim() : ''
    } else {
      scrapedObject[fieldKey] = $(document, fieldSelectorString).getAttribute(field.attribute) ? $(document, fieldSelectorString).getAttribute(field.attribute).trim() : ''
    }
  } else {
    scrapedObject[fieldKey] = $(document, fieldSelectorString).textContent ? $(document, fieldSelectorString).textContent.trim() : ''
  }

  return scrapedObject
}

const scrapSelector = (document, section) =>
  Object.keys(section.fields)
    .reduce(scrapedSelectorFields(document, section), Promise.resolve({}))

module.exports = async (document, section) => {
  const sectionSelectors = $$(document, section.selector)
  const scrapedPromises = [...sectionSelectors].map((selector) => scrapSelector(selector, section))
  return Promise.all(scrapedPromises)
}
